
.program i2s_mck
; Transmit an I2S master clock.
;
; Often 256 * Fs
; Must run at 2x MCK rate

.wrap_target
    set pins 1
    set pins 0
.wrap

.program i2s_bidir_master
; I2S audio master block
; Must run at BCK * 4.
;
; This block also outputs the LR clock, and BCK
;

.side_set 2

public entry_point:
firstStartL:
    set x, 30         side 0b00 ; start of Left frame
    pull noblock      side 0b00
    jmp     dataL     side 0b01 [1] ; Don't push at first frame start
.wrap_target
startL:
    out pins, 1       side 0b00 ; start of Left frame
    pull noblock      side 0b00 ; One clock after edge change
    in pins, 1        side 0b01
    push noblock      side 0b01
    out pins, 1       side 0b00
    set x, 29         side 0b00 ; First bit already shifted
    in pins, 1        side 0b01 [1]
dataL:
    out pins, 1       side 0b00 [1]
    in pins, 1        side 0b01
    jmp x-- dataL     side 0b01

startR:
    out pins, 1       side 0b10 ; start of Right frame
    pull noblock      side 0b10 ; One clock after edge change
    in pins, 1        side 0b11
    push noblock      side 0b11
    out pins, 1       side 0b10
    set x, 29         side 0b10 ; First bit already shifted
    in pins, 1        side 0b11 [1]
dataR:
    out pins, 1       side 0b10 [1]
    in pins, 1        side 0b11
    jmp x-- dataR     side 0b11


% c-sdk {

static void i2s_mck_program_init(PIO pio, uint8_t sm, uint8_t offset, uint8_t sck_pin) {
    // Initialize sck pin
    pio_gpio_init(pio, sck_pin);
    pio_sm_config sm_config = i2s_mck_program_get_default_config(offset);
    sm_config_set_set_pins(&sm_config, sck_pin, 1);

    // Set pin direction for state machine
    uint pin_mask = (1u << sck_pin);
    pio_sm_set_pins_with_mask(pio, sm, 0, pin_mask);
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);

    pio_sm_init(pio, sm, offset, &sm_config);
}

static inline void i2s_bidir_master_program_init(PIO pio, uint8_t sm, uint8_t offset, uint8_t bit_depth, uint8_t dout_pin, uint8_t din_pin, uint8_t clock_pin_base) {
    // Initialize pins
    pio_gpio_init(pio, dout_pin);
    pio_gpio_init(pio, clock_pin_base);
    pio_gpio_init(pio, clock_pin_base + 1);
    pio_gpio_init(pio, din_pin);
    gpio_set_pulls(din_pin, false, false);
    gpio_set_dir(din_pin, GPIO_IN);

    pio_sm_config sm_config = i2s_bidir_master_program_get_default_config(offset);
    // Configure output and side-set
    sm_config_set_out_pins(&sm_config, dout_pin, 1);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_out_shift(&sm_config, false, false, bit_depth);
    // Configure input
    sm_config_set_in_pins(&sm_config, din_pin);
    sm_config_set_in_shift(&sm_config, false, false, 0);

    // Set pin directions for state machine
    uint32_t pin_mask = (1u << dout_pin) | (3u << clock_pin_base);
    pio_sm_set_pins_with_mask(pio, sm, 0, pin_mask);
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask | (1 << din_pin));

    pio_sm_init(pio, sm, offset, &sm_config);
}

%}